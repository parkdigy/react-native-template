/********************************************************************************************************************
 * FCM 처리 컴포넌트
 * ******************************************************************************************************************/

import React from 'react';
import {useAppState} from '@context';

export const Fcm: React.FC = () => {
  /********************************************************************************************************************
   * Use
   * ******************************************************************************************************************/

  const {auth, reloadFcmToken} = useAppState();

  /********************************************************************************************************************
   * Ref
   * ******************************************************************************************************************/

  const fcmLoaded = useRef(false);

  /********************************************************************************************************************
   * Effect
   * ******************************************************************************************************************/

  useEffect(() => {
    if (!fcmLoaded.current) {
      loadFcm();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [auth]);

  /********************************************************************************************************************
   * Function
   * ******************************************************************************************************************/

  const loadFcm = useCallback(() => {
    reloadFcmToken().then((loaded) => {
      fcmLoaded.current = loaded;
    });
  }, [reloadFcmToken]);

  /********************************************************************************************************************
   * Event Handler
   * ******************************************************************************************************************/

  const handleActiveFromBackground = useCallback(() => {
    if (!fcmLoaded.current) {
      firebase.messaging.hasPermission().then((permissionStatus) => {
        if (
          !contains(
            [firebase.messaging.AuthorizationStatus.NOT_DETERMINED, firebase.messaging.AuthorizationStatus.DENIED],
            permissionStatus,
          )
        ) {
          reloadFcmToken().then((loaded) => {
            fcmLoaded.current = loaded;
          });
        }
      });
    }
  }, [reloadFcmToken]);

  /********************************************************************************************************************
   * Render
   * ******************************************************************************************************************/

  return <ActiveDetector onActiveFromBackground={handleActiveFromBackground} />;
};

export default Fcm;

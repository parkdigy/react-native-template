apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

react {
    autolinkLibrariesWithApp()

    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", rootDir.getAbsoluteFile().getParentFile().getAbsolutePath(), "android", "absolute"].execute(null, rootDir).text.trim())
    cliFile = new File(["node", "--print", "require.resolve('@expo/cli')"].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"
}

def enableProguardInReleaseBuilds = true
def appVersionName = "1.0.0"
def appVersionCode = 1

def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

def outputDirectory = "${layout.projectDirectory.asFile.absolutePath}/../@dist"
project.mkdir outputDirectory

def outputDebugPath = ''
def outputDebugFileName = ''
def outputStagingPath = ''
def outputStagingFileName = ''
def outputReleasePath = ''
def outputReleaseFileName = ''
def buildDirectory = layout.getBuildDirectory()
def destDirectory

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "domain.reactnativetemplate"
    defaultConfig {
        applicationId "domain.reactnativetemplate"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionName appVersionName
        versionCode appVersionCode
        setProperty("archivesBaseName", applicationId + '_' + appVersionName + '_' + appVersionCode)
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
            shrinkResources enableProguardInReleaseBuilds
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            firebaseCrashlytics {
                nativeSymbolUploadEnabled true
                unstrippedNativeLibsDir 'build/intermediates/merged_native_libs/release/mergeReleaseNativeLibs/out/lib'
            }
        }
        staging {
            initWith release
            firebaseCrashlytics {
                nativeSymbolUploadEnabled true
                unstrippedNativeLibsDir 'build/intermediates/merged_native_libs/staging/mergeStagingNativeLibs/out/lib'
            }
            matchingFallbacks = ['release']
        }
    }

   applicationVariants.all { variant ->
       variant.outputs.each { output ->
           if (output.name == 'debug') {
               outputDebugPath = output.outputFile.parent
               outputDebugFileName = output.outputFile.name
           } else if (output.name == 'staging') {
               outputStagingPath = output.outputFile.parent
               outputStagingFileName = output.outputFile.name
           } else if (output.name == 'release') {
               outputReleasePath = output.outputFile.parent
               outputReleaseFileName = output.outputFile.name
           }
       }
   }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")
    implementation 'com.google.android.gms:play-services-ads-identifier:18.2.0'

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

project.ext.envConfigFiles = [
        debug: ".env.development",
        staging: ".env.staging",
        release: ".env.production",
]

// react-native-config
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"

// aab 파일 이동, native-debug-symbols.zip 생성
tasks.register('clearBuildDirectory', Delete) {
    delete buildDirectory
}
tasks.register('bundleStaging_post_genereNativeDebugSymbols', Exec) {
    workingDir buildDirectory.dir('intermediates/merged_native_libs/staging/mergeStagingNativeLibs/out/lib')
    commandLine 'zip', '-r', "${destDirectory}/native-debug-symbols.zip", './'
}
tasks.register('bundleStaging_post_moveFile', Exec) {
    commandLine 'mv', "${outputStagingPath}/${outputStagingFileName}", destDirectory
}
tasks.register('bundleRelease_post_genereNativeDebugSymbols', Exec) {
    workingDir buildDirectory.dir('intermediates/merged_native_libs/release/mergeReleaseNativeLibs/out/lib')
    commandLine 'zip', '-r', "${destDirectory}/native-debug-symbols.zip", './'
}
tasks.register('bundleRelease_post_moveFile', Exec) {
    commandLine 'mv', "${outputReleasePath}/${outputReleaseFileName}", destDirectory
}

gradle.projectsEvaluated {
    tasks.named('bundleStaging') {
        dependsOn('clearBuildDirectory')

        shouldRunAfter

        outputStagingPath = outputStagingPath.replaceAll('/apk/', '/bundle/')
        outputStagingFileName = outputStagingFileName.replaceAll('.apk', '.aab')

        destDirectory = "${outputDirectory}/staging/${appVersionName}_${appVersionCode}"
        project.mkdir destDirectory

        finalizedBy('bundleStaging_post_genereNativeDebugSymbols')
        finalizedBy('bundleStaging_post_moveFile')
    }
    tasks.named('bundleRelease') {
        dependsOn('clearBuildDirectory')

        shouldRunAfter

        outputReleasePath = outputReleasePath.replaceAll('/apk/', '/bundle/')
        outputReleaseFileName = outputReleaseFileName.replaceAll('.apk', '.aab')

        destDirectory = "${outputDirectory}/release/${appVersionName}_${appVersionCode}"
        project.mkdir destDirectory

        finalizedBy('bundleRelease_post_genereNativeDebugSymbols')
        finalizedBy('bundleRelease_post_moveFile')
    }
}
